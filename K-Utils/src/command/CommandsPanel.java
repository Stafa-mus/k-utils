package command;

import database.Database;
import java.awt.Point;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import static java.awt.event.KeyEvent.VK_DELETE;
import static java.awt.event.KeyEvent.VK_F5;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.IOException;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;

/**
 *
 * @author MustafaMohamed
 */
public class CommandsPanel extends javax.swing.JPanel {
    
    public java.awt.Frame parent;
    
    private final CommandsTableModel commandsModel = new CommandsTableModel();
    
    private static final Logger LOGGER = Logger.getLogger(CommandsPanel.class.getName());
    
    /**
     * Creates new form CommandsPanel
     */
    public CommandsPanel() {
        initComponents();
        jTable1.setModel(commandsModel);
        getCommands();
        jTable1.addKeyListener(new KeyAdapter(){
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == VK_DELETE){
                    onDeleteCommands();
                }
                else if (e.getKeyCode() == VK_F5) {
                    getCommands();
                }
            }
        });
        jTable1.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent mouseEvent) {
                JTable table =(JTable) mouseEvent.getSource();
                Point point = mouseEvent.getPoint();
                int row = table.rowAtPoint(point);
                if (mouseEvent.getClickCount() == 2 && table.getSelectedRow() != -1) {
                    onEditCommand();
                }
            }
        });
        jTextField2.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                getCommands();
            }
            
            @Override
            public void removeUpdate(DocumentEvent e) {
                getCommands();
            }
            
            @Override
            public void changedUpdate(DocumentEvent e) {
                getCommands();
            }
            
        });
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPopupMenuCommands = new javax.swing.JPopupMenu();
        jMenuItemEdit = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenu1 = new javax.swing.JMenu();
        jMenuItemCopyName = new javax.swing.JMenuItem();
        jMenuItemCopyCommand = new javax.swing.JMenuItem();
        jPanel1 = new javax.swing.JPanel();
        jButtonNewCommand = new javax.swing.JButton();
        jButtonEditCommand = new javax.swing.JButton();
        jButtonDeleteCommands = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jPopupMenuCommands.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
                jPopupMenuCommandsPopupMenuWillBecomeVisible(evt);
            }
        });

        jMenuItemEdit.setText("Edit...");
        jMenuItemEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemEditActionPerformed(evt);
            }
        });
        jPopupMenuCommands.add(jMenuItemEdit);
        jPopupMenuCommands.add(jSeparator1);

        jMenu1.setText("Copy to Clipboard");

        jMenuItemCopyName.setText("Copy Name");
        jMenuItemCopyName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCopyNameActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemCopyName);

        jMenuItemCopyCommand.setText("Copy Command");
        jMenuItemCopyCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemCopyCommandActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemCopyCommand);

        jPopupMenuCommands.add(jMenu1);

        jButtonNewCommand.setText("New...");
        jButtonNewCommand.setToolTipText("New Command...");
        jButtonNewCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewCommandActionPerformed(evt);
            }
        });

        jButtonEditCommand.setText("Edit...");
        jButtonEditCommand.setToolTipText("Edit Command...");
        jButtonEditCommand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditCommandActionPerformed(evt);
            }
        });

        jButtonDeleteCommands.setText("Delete...");
        jButtonDeleteCommands.setToolTipText("Delete Command(s)...");
        jButtonDeleteCommands.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteCommandsActionPerformed(evt);
            }
        });

        jTextField2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField2KeyTyped(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 155, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonNewCommand)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonEditCommand)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonDeleteCommands)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonDeleteCommands)
                    .addComponent(jButtonEditCommand)
                    .addComponent(jButtonNewCommand)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Name", "Command", "Description"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setComponentPopupMenu(jPopupMenuCommands);
        jTable1.setRowHeight(30);
        jTable1.setShowHorizontalLines(true);
        jTable1.setShowVerticalLines(true);
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 328, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonDeleteCommandsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteCommandsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButtonDeleteCommandsActionPerformed

    private void jButtonNewCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewCommandActionPerformed
        onNewCommand();
    }//GEN-LAST:event_jButtonNewCommandActionPerformed

    private void jTextField2KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField2KeyTyped
        
    }//GEN-LAST:event_jTextField2KeyTyped

    private void jButtonEditCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditCommandActionPerformed
        onEditCommand();
    }//GEN-LAST:event_jButtonEditCommandActionPerformed

    private void jMenuItemEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemEditActionPerformed
        onEditCommand();
    }//GEN-LAST:event_jMenuItemEditActionPerformed

    private void jPopupMenuCommandsPopupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jPopupMenuCommandsPopupMenuWillBecomeVisible
        onMenuWillBecomeVisible();
    }//GEN-LAST:event_jPopupMenuCommandsPopupMenuWillBecomeVisible

    private void jMenuItemCopyNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCopyNameActionPerformed
        onCopyCommandName();
    }//GEN-LAST:event_jMenuItemCopyNameActionPerformed

    private void jMenuItemCopyCommandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemCopyCommandActionPerformed
        onCopyCommandValue();
    }//GEN-LAST:event_jMenuItemCopyCommandActionPerformed
    
    private void onCopyCommandValue() {
        int selected = jTable1.getSelectedRowCount();
        if (selected == 1) {
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            int index = jTable1.convertRowIndexToModel(jTable1.getSelectedRow());
            Command command = commandsModel.getCommandAt(index);
            clipboard.setContents(new StringSelection(command.command), null);
        }
    }
    
    private void onCopyCommandName() {
        int selected = jTable1.getSelectedRowCount();
        if (selected == 1) {
            Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
            int index = jTable1.convertRowIndexToModel(jTable1.getSelectedRow());
            Command command = commandsModel.getCommandAt(index);
            clipboard.setContents(new StringSelection(command.name), null);
        }
    }
    
    private void onMenuWillBecomeVisible() {
        int selected = jTable1.getSelectedRowCount();
        
        jMenuItemEdit.setEnabled(selected == 1);
        jMenuItemCopyName.setEnabled(selected == 1);
        jMenuItemCopyCommand.setEnabled(selected == 1);
    }
    
    private void onNewCommand(){
        NewCommandDialog dialog = new NewCommandDialog(parent, true);
        dialog.setLocationRelativeTo(this);
        dialog.setVisible(true);
        getCommands();
    }
    
    private void getCommands() {
        LOGGER.log(Level.INFO, "Getting commands...");
        commandsModel.clear();
        String search = jTextField2.getText().trim();
        String sql = "SELECT * FROM commands WHERE `name` LIKE ? OR command LIKE ? OR description LIKE ? "
                + "ORDER BY `name` ASC, command ASC, description ASC ";
        try {
            PreparedStatement stmt = Database.getConnection().prepareStatement(sql);
            String s = "%" + search + "%";
            stmt.setString(1, s);
            stmt.setString(2, s);
            stmt.setString(3, s);
            ResultSet rs = stmt.executeQuery();
            while (rs.next()) {
                Command c = new Command();
                c.command = rs.getString("command");
                c.description = rs.getString("description");
                c.id = rs.getInt("id");
                c.name = rs.getString("name");
                commandsModel.addCommand(c);
            }
        } catch (IOException | SQLException | ClassNotFoundException ex) {
            Logger.getLogger(CommandsPanel.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        finally {
            commandsModel.fireTableDataChanged();
        }
    }
    
    private void onDeleteCommands() {
        if (jTable1.getSelectedRowCount() > 0) {
            var count = jTable1.getSelectedRowCount();
            boolean plural = count > 1;
            var message = "Are you sure you want to delete the selected command" + (plural ? "s" : "") + "?";
            var title = "Delete Command" + (plural ? "s" : "");
            var result = JOptionPane.showConfirmDialog(this, message, title, JOptionPane.YES_NO_OPTION);
            if (result == JOptionPane.YES_OPTION) {
                String sql = "DELETE FROM commands WHERE id = ? ";
                try {
                    PreparedStatement stmt = Database.getConnection().prepareStatement(sql);
                    for (int index : jTable1.getSelectedRows()) {
                        int i = jTable1.convertRowIndexToModel(index);
                        var c = commandsModel.getCommandAt(i);
                        stmt.setInt(1, c.id);
                        stmt.executeUpdate();
                    }
                    getCommands();
                    JOptionPane.showMessageDialog(this, "Command" + (plural ? "s" : "") +  " deleted successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
                } catch (IOException | SQLException | ClassNotFoundException ex) {
                    Logger.getLogger(CommandsPanel.class.getName()).log(Level.SEVERE, null, ex);
                    JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }
    
    private void onEditCommand() {
        if (jTable1.getSelectedRow() >= 0 && jTable1.getSelectedRowCount() == 1){
            int index = jTable1.convertRowIndexToModel(jTable1.getSelectedRow());
            Command c = commandsModel.getCommandAt(index);
            EditCommandDialog dialog = new EditCommandDialog(null, true);
            try {
                dialog.setCommand(c.id);
                dialog.setLocationRelativeTo(this);
                dialog.setVisible(true);
                getCommands();
            } catch (IOException | SQLException | ClassNotFoundException ex) {
                Logger.getLogger(CommandsPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "An error occurred: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonDeleteCommands;
    private javax.swing.JButton jButtonEditCommand;
    private javax.swing.JButton jButtonNewCommand;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuItem jMenuItemCopyCommand;
    private javax.swing.JMenuItem jMenuItemCopyName;
    private javax.swing.JMenuItem jMenuItemEdit;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPopupMenu jPopupMenuCommands;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
